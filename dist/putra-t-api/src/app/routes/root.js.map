{
  "version": 3,
  "sources": ["../../../../../src/app/routes/root.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { FastifyReply, FastifyRequest, FastifyInstance } from \"fastify\";\nimport { Prisma, PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nexport default async function routes(fastify: FastifyInstance, options) {\n\n  fastify.post<{\n    Body: ISignupBody\n  }>(`/signup`, async (req, res) => {\n    const { name, email, posts } = req.body\n  \n    const postData = posts?.map((post: Prisma.PostCreateInput) => {\n      return { title: post?.title, content: post?.content }\n    })\n  \n    const result = await prisma.user.create({\n      data: {\n        name,\n        email,\n        posts: {\n          create: postData,\n        },\n      },\n    })\n    return result\n  })\n  \n  fastify.post<{\n    Body: ICreatePostBody\n  }>(`/post`, async (req, res) => {\n    const { title, content, authorEmail } = req.body\n    const result = await prisma.post.create({\n      data: {\n        title,\n        content,\n        author: { connect: { email: authorEmail } },\n      },\n    })\n    return result\n  })\n  \n  fastify.put<{\n    Params: IPostByIdParam\n  }>('/post/:id/views', async (req, res) => {\n    const { id } = req.params\n  \n    try {\n      const post = await prisma.post.update({\n        where: { id: Number(id) },\n        data: {\n          viewCount: {\n            increment: 1,\n          },\n        },\n      })\n  \n      return post\n    } catch (error) {\n      return { error: `Post with ID ${id} does not exist in the database` }\n    }\n  })\n  \n  fastify.put<{\n    Params: IPostByIdParam\n  }>('/publish/:id', async (req, res) => {\n    const { id } = req.params\n  \n    try {\n      const postData = await prisma.post.findUnique({\n        where: { id: Number(id) },\n        select: {\n          published: true,\n        },\n      })\n  \n      const updatedPost = await prisma.post.update({\n        where: { id: Number(id) || undefined },\n        data: { published: !postData?.published },\n      })\n      return updatedPost\n    } catch (error) {\n      return { error: `Post with ID ${id} does not exist in the database` }\n    }\n  })\n  \n  fastify.delete<{\n    Params: IPostByIdParam\n  }>(`/post/:id`, async (req, res) => {\n    const { id } = req.params\n    const post = await prisma.post.delete({\n      where: {\n        id: Number(id),\n      },\n    })\n    return post\n  })\n  \n  fastify.get('/users', async (req, res) => {\n    const users = await prisma.user.findMany()\n    return users\n  })\n  \n  fastify.get<{\n    Params: IPostByIdParam\n  }>('/user/:id/drafts', async (req, res) => {\n    const { id } = req.params\n  \n    const drafts = await prisma.user\n      .findUnique({\n        where: { id: Number(id) },\n      })\n      .posts({\n        where: { published: false },\n      })\n  \n    return drafts\n  })\n  \n  fastify.get<{\n    Params: IPostByIdParam\n  }>(`/post/:id`, async (req, res) => {\n    const { id } = req.params\n  \n    const post = await prisma.post.findUnique({\n      where: { id: Number(id) },\n    })\n    return post\n  })\n  \n  fastify.get<{\n    Querystring: IFeedQueryString\n  }>('/feed', async (req, res) => {\n    const { searchString, skip, take, orderBy } = req?.query || {};\n  \n    const or: Prisma.PostWhereInput = searchString\n      ? {\n        OR: [\n          { title: { contains: searchString as string } },\n          { content: { contains: searchString as string } },\n        ],\n      }\n      : {}\n  \n    const posts = await prisma.post.findMany({\n      where: {\n        published: true,\n        ...or,\n      },\n      include: { author: true },\n      take: Number(take) || undefined,\n      skip: Number(skip) || undefined,\n      orderBy: {\n        updatedAt: orderBy as Prisma.SortOrder,\n      },\n    })\n  \n    return posts\n  })\n  interface IFeedQueryString {\n    searchString: string | null\n    skip: number | null\n    take: number | null\n    orderBy: Prisma.SortOrder | null\n  }\n  \n  interface IPostByIdParam {\n    id: number\n  }\n  \n  interface ICreatePostBody {\n    title: string\n    content: string | null\n    authorEmail: string\n  }\n  \n  interface ISignupBody {\n    name: string | null\n    email: string\n    posts: Prisma.PostCreateInput[]\n  }\n  \n\n  fastify.get(\"/\", async (request: FastifyRequest, reply: FastifyReply) => {\n    return { hello: \"world\" };\n  });\n\n  fastify.get(\"/hi\", async (request: FastifyRequest, reply: FastifyReply) => {\n    return { hi: \"zakiego\" };\n  });\n}"],
  "mappings": "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",
  "names": []
}
